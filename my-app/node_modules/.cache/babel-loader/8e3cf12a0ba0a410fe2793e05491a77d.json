{"ast":null,"code":"const debug = require('debug')('log4js:noLogFilter');\n/**\n * The function removes empty or null regexp from the array\n * @param {string[]} regexp\n * @returns {string[]} a filtered string array with not empty or null regexp\n */\n\n\nfunction removeNullOrEmptyRegexp(regexp) {\n  const filtered = regexp.filter(el => el != null && el !== '');\n  return filtered;\n}\n/**\n * Returns a function that will exclude the events in case they match\n * with the regular expressions provided\n * @param {(string|string[])} filters contains the regexp that will be used for the evaluation\n * @param {*} appender\n * @returns {function}\n */\n\n\nfunction noLogFilter(filters, appender) {\n  return logEvent => {\n    debug(`Checking data: ${logEvent.data} against filters: ${filters}`);\n\n    if (typeof filters === 'string') {\n      filters = [filters];\n    }\n\n    filters = removeNullOrEmptyRegexp(filters);\n    const regex = new RegExp(filters.join('|'), 'i');\n\n    if (filters.length === 0 || logEvent.data.findIndex(value => regex.test(value)) < 0) {\n      debug('Not excluded, sending to appender');\n      appender(logEvent);\n    }\n  };\n}\n\nfunction configure(config, layouts, findAppender) {\n  const appender = findAppender(config.appender);\n  return noLogFilter(config.exclude, appender);\n}\n\nmodule.exports.configure = configure;","map":{"version":3,"sources":["/Users/osurihimeshkrishna/Downloads/Academics/8th Semester/Software Production Engineering/spe_finalproject/my-app/node_modules/log4js/lib/appenders/noLogFilter.js"],"names":["debug","require","removeNullOrEmptyRegexp","regexp","filtered","filter","el","noLogFilter","filters","appender","logEvent","data","regex","RegExp","join","length","findIndex","value","test","configure","config","layouts","findAppender","exclude","module","exports"],"mappings":"AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,oBAAjB,CAAd;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,CAAiCC,MAAjC,EAAyC;AACvC,QAAMC,QAAQ,GAAGD,MAAM,CAACE,MAAP,CAAcC,EAAE,IAAMA,EAAE,IAAI,IAAP,IAAiBA,EAAE,KAAK,EAA7C,CAAjB;AACA,SAAOF,QAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,WAAT,CAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AACtC,SAAQC,QAAD,IAAc;AACnBV,IAAAA,KAAK,CAAE,kBAAiBU,QAAQ,CAACC,IAAK,qBAAoBH,OAAQ,EAA7D,CAAL;;AACA,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AACDA,IAAAA,OAAO,GAAGN,uBAAuB,CAACM,OAAD,CAAjC;AACA,UAAMI,KAAK,GAAG,IAAIC,MAAJ,CAAWL,OAAO,CAACM,IAAR,CAAa,GAAb,CAAX,EAA8B,GAA9B,CAAd;;AACA,QAAIN,OAAO,CAACO,MAAR,KAAmB,CAAnB,IACCL,QAAQ,CAACC,IAAT,CAAcK,SAAd,CAAwBC,KAAK,IAAIL,KAAK,CAACM,IAAN,CAAWD,KAAX,CAAjC,IAAsD,CAD3D,EAC8D;AAC5DjB,MAAAA,KAAK,CAAC,mCAAD,CAAL;AACAS,MAAAA,QAAQ,CAACC,QAAD,CAAR;AACD;AACF,GAZD;AAaD;;AAED,SAASS,SAAT,CAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,YAApC,EAAkD;AAChD,QAAMb,QAAQ,GAAGa,YAAY,CAACF,MAAM,CAACX,QAAR,CAA7B;AACA,SAAOF,WAAW,CAACa,MAAM,CAACG,OAAR,EAAiBd,QAAjB,CAAlB;AACD;;AAEDe,MAAM,CAACC,OAAP,CAAeN,SAAf,GAA2BA,SAA3B","sourcesContent":["\n\nconst debug = require('debug')('log4js:noLogFilter');\n\n/**\n * The function removes empty or null regexp from the array\n * @param {string[]} regexp\n * @returns {string[]} a filtered string array with not empty or null regexp\n */\nfunction removeNullOrEmptyRegexp(regexp) {\n  const filtered = regexp.filter(el => ((el != null) && (el !== '')));\n  return filtered;\n}\n\n/**\n * Returns a function that will exclude the events in case they match\n * with the regular expressions provided\n * @param {(string|string[])} filters contains the regexp that will be used for the evaluation\n * @param {*} appender\n * @returns {function}\n */\nfunction noLogFilter(filters, appender) {\n  return (logEvent) => {\n    debug(`Checking data: ${logEvent.data} against filters: ${filters}`);\n    if (typeof filters === 'string') {\n      filters = [filters];\n    }\n    filters = removeNullOrEmptyRegexp(filters);\n    const regex = new RegExp(filters.join('|'), 'i');\n    if (filters.length === 0\n      || logEvent.data.findIndex(value => regex.test(value)) < 0) {\n      debug('Not excluded, sending to appender');\n      appender(logEvent);\n    }\n  };\n}\n\nfunction configure(config, layouts, findAppender) {\n  const appender = findAppender(config.appender);\n  return noLogFilter(config.exclude, appender);\n}\n\nmodule.exports.configure = configure;\n"]},"metadata":{},"sourceType":"script"}