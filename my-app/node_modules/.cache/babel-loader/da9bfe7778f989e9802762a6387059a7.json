{"ast":null,"code":"const debug = require('debug')('streamroller:moveAndMaybeCompressFile');\n\nconst fs = require('fs-extra');\n\nconst zlib = require('zlib');\n\nconst moveAndMaybeCompressFile = async (sourceFilePath, targetFilePath, needCompress) => {\n  if (sourceFilePath === targetFilePath) {\n    debug(`moveAndMaybeCompressFile: source and target are the same, not doing anything`);\n    return;\n  }\n\n  if (await fs.pathExists(sourceFilePath)) {\n    debug(`moveAndMaybeCompressFile: moving file from ${sourceFilePath} to ${targetFilePath} ${needCompress ? \"with\" : \"without\"} compress`);\n\n    if (needCompress) {\n      await new Promise((resolve, reject) => {\n        fs.createReadStream(sourceFilePath).pipe(zlib.createGzip()).pipe(fs.createWriteStream(targetFilePath)).on(\"finish\", () => {\n          debug(`moveAndMaybeCompressFile: finished compressing ${targetFilePath}, deleting ${sourceFilePath}`);\n          fs.unlink(sourceFilePath).then(resolve).catch(() => {\n            debug(`Deleting ${sourceFilePath} failed, truncating instead`);\n            fs.truncate(sourceFilePath).then(resolve).catch(reject);\n          });\n        });\n      });\n    } else {\n      debug(`moveAndMaybeCompressFile: deleting file=${targetFilePath}, renaming ${sourceFilePath} to ${targetFilePath}`);\n\n      try {\n        await fs.move(sourceFilePath, targetFilePath, {\n          overwrite: true\n        });\n      } catch (e) {\n        debug(`moveAndMaybeCompressFile: error moving ${sourceFilePath} to ${targetFilePath}`, e);\n        debug(`Trying copy+truncate instead`);\n        await fs.copy(sourceFilePath, targetFilePath, {\n          overwrite: true\n        });\n        await fs.truncate(sourceFilePath);\n      }\n    }\n  }\n};\n\nmodule.exports = moveAndMaybeCompressFile;","map":{"version":3,"sources":["/Users/osurihimeshkrishna/Downloads/Academics/8th Semester/Software Production Engineering/spe_finalproject/my-app/node_modules/streamroller/lib/moveAndMaybeCompressFile.js"],"names":["debug","require","fs","zlib","moveAndMaybeCompressFile","sourceFilePath","targetFilePath","needCompress","pathExists","Promise","resolve","reject","createReadStream","pipe","createGzip","createWriteStream","on","unlink","then","catch","truncate","move","overwrite","e","copy","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,uCAAjB,CAAd;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,UAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMG,wBAAwB,GAAG,OAC/BC,cAD+B,EAE/BC,cAF+B,EAG/BC,YAH+B,KAI5B;AACH,MAAIF,cAAc,KAAKC,cAAvB,EAAuC;AACrCN,IAAAA,KAAK,CACF,8EADE,CAAL;AAGA;AACD;;AACC,MAAI,MAAME,EAAE,CAACM,UAAH,CAAcH,cAAd,CAAV,EAAyC;AAEvCL,IAAAA,KAAK,CACF,8CAA6CK,cAAe,OAAMC,cAAe,IAChFC,YAAY,GAAG,MAAH,GAAY,SACzB,WAHE,CAAL;;AAKA,QAAIA,YAAJ,EAAkB;AAChB,YAAM,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrCT,QAAAA,EAAE,CAACU,gBAAH,CAAoBP,cAApB,EACGQ,IADH,CACQV,IAAI,CAACW,UAAL,EADR,EAEGD,IAFH,CAEQX,EAAE,CAACa,iBAAH,CAAqBT,cAArB,CAFR,EAGGU,EAHH,CAGM,QAHN,EAGgB,MAAM;AAClBhB,UAAAA,KAAK,CACF,kDAAiDM,cAAe,cAAaD,cAAe,EAD1F,CAAL;AAGAH,UAAAA,EAAE,CAACe,MAAH,CAAUZ,cAAV,EACGa,IADH,CACQR,OADR,EAEGS,KAFH,CAES,MAAM;AACXnB,YAAAA,KAAK,CAAE,YAAWK,cAAe,6BAA5B,CAAL;AACAH,YAAAA,EAAE,CAACkB,QAAH,CAAYf,cAAZ,EAA4Ba,IAA5B,CAAiCR,OAAjC,EAA0CS,KAA1C,CAAgDR,MAAhD;AACD,WALH;AAMD,SAbH;AAcD,OAfK,CAAN;AAgBD,KAjBD,MAiBO;AACLX,MAAAA,KAAK,CACF,2CAA0CM,cAAe,cAAaD,cAAe,OAAMC,cAAe,EADxG,CAAL;;AAGA,UAAI;AACF,cAAMJ,EAAE,CAACmB,IAAH,CAAQhB,cAAR,EAAwBC,cAAxB,EAAwC;AAAEgB,UAAAA,SAAS,EAAE;AAAb,SAAxC,CAAN;AACD,OAFD,CAEE,OAAOC,CAAP,EAAU;AACVvB,QAAAA,KAAK,CACF,0CAAyCK,cAAe,OAAMC,cAAe,EAD3E,EAC8EiB,CAD9E,CAAL;AAGAvB,QAAAA,KAAK,CAAE,8BAAF,CAAL;AACA,cAAME,EAAE,CAACsB,IAAH,CAAQnB,cAAR,EAAwBC,cAAxB,EAAwC;AAAEgB,UAAAA,SAAS,EAAE;AAAb,SAAxC,CAAN;AACA,cAAMpB,EAAE,CAACkB,QAAH,CAAYf,cAAZ,CAAN;AACD;AACF;AACF;AACJ,CAnDD;;AAqDAoB,MAAM,CAACC,OAAP,GAAiBtB,wBAAjB","sourcesContent":["const debug = require('debug')('streamroller:moveAndMaybeCompressFile');\nconst fs = require('fs-extra');\nconst zlib = require('zlib');\n\nconst moveAndMaybeCompressFile = async (\n  sourceFilePath,\n  targetFilePath,\n  needCompress\n) => {\n  if (sourceFilePath === targetFilePath) {\n    debug(\n      `moveAndMaybeCompressFile: source and target are the same, not doing anything`\n    );\n    return;\n  }\n    if (await fs.pathExists(sourceFilePath)) {\n\n      debug(\n        `moveAndMaybeCompressFile: moving file from ${sourceFilePath} to ${targetFilePath} ${\n          needCompress ? \"with\" : \"without\"\n        } compress`\n      );\n      if (needCompress) {\n        await new Promise((resolve, reject) => {\n          fs.createReadStream(sourceFilePath)\n            .pipe(zlib.createGzip())\n            .pipe(fs.createWriteStream(targetFilePath))\n            .on(\"finish\", () => {\n              debug(\n                `moveAndMaybeCompressFile: finished compressing ${targetFilePath}, deleting ${sourceFilePath}`\n              );\n              fs.unlink(sourceFilePath)\n                .then(resolve)\n                .catch(() => {\n                  debug(`Deleting ${sourceFilePath} failed, truncating instead`);\n                  fs.truncate(sourceFilePath).then(resolve).catch(reject)\n                });\n            });\n        });\n      } else {\n        debug(\n          `moveAndMaybeCompressFile: deleting file=${targetFilePath}, renaming ${sourceFilePath} to ${targetFilePath}`\n        );\n        try {\n          await fs.move(sourceFilePath, targetFilePath, { overwrite: true });\n        } catch (e) {\n          debug(\n            `moveAndMaybeCompressFile: error moving ${sourceFilePath} to ${targetFilePath}`, e\n          );\n          debug(`Trying copy+truncate instead`);\n          await fs.copy(sourceFilePath, targetFilePath, { overwrite: true });\n          await fs.truncate(sourceFilePath);\n        }\n      }\n    }\n};\n\nmodule.exports = moveAndMaybeCompressFile;\n"]},"metadata":{},"sourceType":"script"}