{"ast":null,"code":"const debug = require(\"debug\")(\"streamroller:fileNameFormatter\");\n\nconst path = require(\"path\");\n\nconst FILENAME_SEP = \".\";\nconst ZIP_EXT = \".gz\";\n\nmodule.exports = ({\n  file,\n  keepFileExt,\n  needsIndex,\n  alwaysIncludeDate,\n  compress\n}) => {\n  const dirAndName = path.join(file.dir, file.name);\n\n  const ext = f => f + file.ext;\n\n  const index = (f, i, d) => (needsIndex || !d) && i ? f + FILENAME_SEP + i : f;\n\n  const date = (f, i, d) => {\n    return (i > 0 || alwaysIncludeDate) && d ? f + FILENAME_SEP + d : f;\n  };\n\n  const gzip = (f, i) => i && compress ? f + ZIP_EXT : f;\n\n  const parts = keepFileExt ? [date, index, ext, gzip] : [ext, date, index, gzip];\n  return ({\n    date,\n    index\n  }) => {\n    debug(`_formatFileName: date=${date}, index=${index}`);\n    return parts.reduce((filename, part) => part(filename, index, date), dirAndName);\n  };\n};","map":{"version":3,"sources":["/Users/osurihimeshkrishna/Downloads/Academics/8th Semester/Software Production Engineering/spe_finalproject/my-app/node_modules/streamroller/lib/fileNameFormatter.js"],"names":["debug","require","path","FILENAME_SEP","ZIP_EXT","module","exports","file","keepFileExt","needsIndex","alwaysIncludeDate","compress","dirAndName","join","dir","name","ext","f","index","i","d","date","gzip","parts","reduce","filename","part"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,gCAAjB,CAAd;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,YAAY,GAAG,GAArB;AACA,MAAMC,OAAO,GAAG,KAAhB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAChBC,EAAAA,IADgB;AAEhBC,EAAAA,WAFgB;AAGhBC,EAAAA,UAHgB;AAIhBC,EAAAA,iBAJgB;AAKhBC,EAAAA;AALgB,CAAD,KAMX;AACJ,QAAMC,UAAU,GAAGV,IAAI,CAACW,IAAL,CAAUN,IAAI,CAACO,GAAf,EAAoBP,IAAI,CAACQ,IAAzB,CAAnB;;AAEA,QAAMC,GAAG,GAAGC,CAAC,IAAIA,CAAC,GAAGV,IAAI,CAACS,GAA1B;;AAEA,QAAME,KAAK,GAAG,CAACD,CAAD,EAAIE,CAAJ,EAAOC,CAAP,KACZ,CAACX,UAAU,IAAI,CAACW,CAAhB,KAAsBD,CAAtB,GAA0BF,CAAC,GAAGd,YAAJ,GAAmBgB,CAA7C,GAAiDF,CADnD;;AAGA,QAAMI,IAAI,GAAG,CAACJ,CAAD,EAAIE,CAAJ,EAAOC,CAAP,KAAa;AACxB,WAAO,CAACD,CAAC,GAAG,CAAJ,IAAST,iBAAV,KAAgCU,CAAhC,GAAoCH,CAAC,GAAGd,YAAJ,GAAmBiB,CAAvD,GAA2DH,CAAlE;AACD,GAFD;;AAIA,QAAMK,IAAI,GAAG,CAACL,CAAD,EAAIE,CAAJ,KAAWA,CAAC,IAAIR,QAAL,GAAgBM,CAAC,GAAGb,OAApB,GAA8Ba,CAAtD;;AAEA,QAAMM,KAAK,GAAGf,WAAW,GACrB,CAACa,IAAD,EAAOH,KAAP,EAAcF,GAAd,EAAmBM,IAAnB,CADqB,GAErB,CAACN,GAAD,EAAMK,IAAN,EAAYH,KAAZ,EAAmBI,IAAnB,CAFJ;AAIA,SAAO,CAAC;AAAED,IAAAA,IAAF;AAAQH,IAAAA;AAAR,GAAD,KAAqB;AAC1BlB,IAAAA,KAAK,CAAE,yBAAwBqB,IAAK,WAAUH,KAAM,EAA/C,CAAL;AACA,WAAOK,KAAK,CAACC,MAAN,CACL,CAACC,QAAD,EAAWC,IAAX,KAAoBA,IAAI,CAACD,QAAD,EAAWP,KAAX,EAAkBG,IAAlB,CADnB,EAELT,UAFK,CAAP;AAID,GAND;AAOD,CA/BD","sourcesContent":["const debug = require(\"debug\")(\"streamroller:fileNameFormatter\");\nconst path = require(\"path\");\nconst FILENAME_SEP = \".\";\nconst ZIP_EXT = \".gz\";\n\nmodule.exports = ({\n  file,\n  keepFileExt,\n  needsIndex,\n  alwaysIncludeDate,\n  compress\n}) => {\n  const dirAndName = path.join(file.dir, file.name);\n\n  const ext = f => f + file.ext;\n\n  const index = (f, i, d) =>\n    (needsIndex || !d) && i ? f + FILENAME_SEP + i : f;\n\n  const date = (f, i, d) => {\n    return (i > 0 || alwaysIncludeDate) && d ? f + FILENAME_SEP + d : f;\n  };\n\n  const gzip = (f, i) => (i && compress ? f + ZIP_EXT : f);\n\n  const parts = keepFileExt\n    ? [date, index, ext, gzip]\n    : [ext, date, index, gzip];\n\n  return ({ date, index }) => {\n    debug(`_formatFileName: date=${date}, index=${index}`);\n    return parts.reduce(\n      (filename, part) => part(filename, index, date),\n      dirAndName\n    );\n  };\n};\n"]},"metadata":{},"sourceType":"script"}