{"ast":null,"code":"const debug = require('debug')('log4js:file');\n\nconst path = require('path');\n\nconst streams = require('streamroller');\n\nconst os = require('os');\n\nconst eol = os.EOL;\n\nfunction openTheStream(file, fileSize, numFiles, options) {\n  const stream = new streams.RollingFileStream(file, fileSize, numFiles, options);\n  stream.on('error', err => {\n    console.error('log4js.fileAppender - Writing to file %s, error happened ', file, err); //eslint-disable-line\n  });\n  stream.on('drain', () => {\n    process.emit(\"log4js:pause\", false);\n  });\n  return stream;\n}\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logEvent and returns a string\n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file,\n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize\n *   has been reached (default 5)\n * @param options - options to be passed to the underlying stream\n * @param timezoneOffset - optional timezone offset in minutes (default system local)\n */\n\n\nfunction fileAppender(file, layout, logSize, numBackups, options, timezoneOffset) {\n  file = path.normalize(file);\n  numBackups = numBackups === undefined ? 5 : numBackups; // there has to be at least one backup if logSize has been specified\n\n  numBackups = numBackups === 0 ? 1 : numBackups;\n  debug('Creating file appender (', file, ', ', logSize, ', ', numBackups, ', ', options, ', ', timezoneOffset, ')');\n  let writer = openTheStream(file, logSize, numBackups, options);\n\n  const app = function (loggingEvent) {\n    if (options.removeColor === true) {\n      // eslint-disable-next-line no-control-regex\n      const regex = /\\x1b[[0-9;]*m/g;\n      loggingEvent.data = loggingEvent.data.map(d => {\n        if (typeof d === 'string') return d.replace(regex, '');\n        return d;\n      });\n    }\n\n    if (!writer.write(layout(loggingEvent, timezoneOffset) + eol, \"utf8\")) {\n      process.emit('log4js:pause', true);\n    }\n  };\n\n  app.reopen = function () {\n    writer.end(() => {\n      writer = openTheStream(file, logSize, numBackups, options);\n    });\n  };\n\n  app.sighupHandler = function () {\n    debug('SIGHUP handler called.');\n    app.reopen();\n  };\n\n  app.shutdown = function (complete) {\n    process.removeListener('SIGHUP', app.sighupHandler);\n    writer.end('', 'utf-8', complete);\n  }; // On SIGHUP, close and reopen all files. This allows this appender to work with\n  // logrotate. Note that if you are using logrotate, you should not set\n  // `logSize`.\n\n\n  process.on('SIGHUP', app.sighupHandler);\n  return app;\n}\n\nfunction configure(config, layouts) {\n  let layout = layouts.basicLayout;\n\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  return fileAppender(config.filename, layout, config.maxLogSize, config.backups, config, config.timezoneOffset);\n}\n\nmodule.exports.configure = configure;","map":{"version":3,"sources":["/Users/osurihimeshkrishna/Downloads/Academics/8th Semester/Software Production Engineering/spe_finalproject/my-app/node_modules/log4js/lib/appenders/file.js"],"names":["debug","require","path","streams","os","eol","EOL","openTheStream","file","fileSize","numFiles","options","stream","RollingFileStream","on","err","console","error","process","emit","fileAppender","layout","logSize","numBackups","timezoneOffset","normalize","undefined","writer","app","loggingEvent","removeColor","regex","data","map","d","replace","write","reopen","end","sighupHandler","shutdown","complete","removeListener","configure","config","layouts","basicLayout","type","filename","maxLogSize","backups","module","exports"],"mappings":"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","sourcesContent":["const debug = require('debug')('log4js:file');\nconst path = require('path');\nconst streams = require('streamroller');\nconst os = require('os');\n\nconst eol = os.EOL;\n\nfunction openTheStream(file, fileSize, numFiles, options) {\n  const stream = new streams.RollingFileStream(\n    file,\n    fileSize,\n    numFiles,\n    options\n  );\n  stream.on('error', (err) => {\n    console.error('log4js.fileAppender - Writing to file %s, error happened ', file, err); //eslint-disable-line\n  });\n  stream.on('drain', () => {\n    process.emit(\"log4js:pause\", false);\n  });\n  return stream;\n}\n\n\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logEvent and returns a string\n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file,\n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize\n *   has been reached (default 5)\n * @param options - options to be passed to the underlying stream\n * @param timezoneOffset - optional timezone offset in minutes (default system local)\n */\nfunction fileAppender(file, layout, logSize, numBackups, options, timezoneOffset) {\n  file = path.normalize(file);\n  numBackups = numBackups === undefined ? 5 : numBackups;\n  // there has to be at least one backup if logSize has been specified\n  numBackups = numBackups === 0 ? 1 : numBackups;\n\n  debug(\n    'Creating file appender (',\n    file, ', ',\n    logSize, ', ',\n    numBackups, ', ',\n    options, ', ',\n    timezoneOffset, ')'\n  );\n\n  let writer = openTheStream(file, logSize, numBackups, options);\n\n  const app = function (loggingEvent) {\n    if (options.removeColor === true) {\n      // eslint-disable-next-line no-control-regex\n      const regex = /\\x1b[[0-9;]*m/g;\n      loggingEvent.data = loggingEvent.data.map(d => {\n        if (typeof d === 'string') return d.replace(regex, '')\n        return d\n      })\n    }\n    if (!writer.write(layout(loggingEvent, timezoneOffset) + eol, \"utf8\")) {\n      process.emit('log4js:pause', true);\n    }\n  };\n\n  app.reopen = function () {\n    writer.end(() => { writer = openTheStream(file, logSize, numBackups, options); });\n  };\n\n  app.sighupHandler = function () {\n    debug('SIGHUP handler called.');\n    app.reopen();\n  };\n\n  app.shutdown = function (complete) {\n    process.removeListener('SIGHUP', app.sighupHandler);\n    writer.end('', 'utf-8', complete);\n  };\n\n  // On SIGHUP, close and reopen all files. This allows this appender to work with\n  // logrotate. Note that if you are using logrotate, you should not set\n  // `logSize`.\n  process.on('SIGHUP', app.sighupHandler);\n\n  return app;\n}\n\nfunction configure(config, layouts) {\n  let layout = layouts.basicLayout;\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  return fileAppender(\n    config.filename,\n    layout,\n    config.maxLogSize,\n    config.backups,\n    config,\n    config.timezoneOffset\n  );\n}\n\nmodule.exports.configure = configure;\n"]},"metadata":{},"sourceType":"script"}