{"ast":null,"code":"const util = require('util');\n\nconst debug = require('debug')('log4js:configuration');\n\nconst preProcessingListeners = [];\nconst listeners = [];\n\nconst not = thing => !thing;\n\nconst anObject = thing => thing && typeof thing === 'object' && !Array.isArray(thing);\n\nconst validIdentifier = thing => /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\n\nconst anInteger = thing => thing && typeof thing === 'number' && Number.isInteger(thing);\n\nconst addListener = fn => {\n  listeners.push(fn);\n  debug(`Added listener, now ${listeners.length} listeners`);\n};\n\nconst addPreProcessingListener = fn => {\n  preProcessingListeners.push(fn);\n  debug(`Added pre-processing listener, now ${preProcessingListeners.length} listeners`);\n};\n\nconst throwExceptionIf = (config, checks, message) => {\n  const tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach(test => {\n    if (test) {\n      throw new Error(`Problem with log4js configuration: (${util.inspect(config, {\n        depth: 5\n      })})` + ` - ${message}`);\n    }\n  });\n};\n\nconst configure = candidate => {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n  debug(`Calling pre-processing listeners (${preProcessingListeners.length})`);\n  preProcessingListeners.forEach(listener => listener(candidate));\n  debug('Configuration pre-processing finished.');\n  debug(`Calling configuration listeners (${listeners.length})`);\n  listeners.forEach(listener => listener(candidate));\n  debug('Configuration finished.');\n};\n\nmodule.exports = {\n  configure,\n  addListener,\n  addPreProcessingListener,\n  throwExceptionIf,\n  anObject,\n  anInteger,\n  validIdentifier,\n  not\n};","map":{"version":3,"sources":["/Users/osurihimeshkrishna/Downloads/Academics/8th Semester/Software Production Engineering/spe_finalproject/my-app/node_modules/log4js/lib/configuration.js"],"names":["util","require","debug","preProcessingListeners","listeners","not","thing","anObject","Array","isArray","validIdentifier","test","anInteger","Number","isInteger","addListener","fn","push","length","addPreProcessingListener","throwExceptionIf","config","checks","message","tests","forEach","Error","inspect","depth","configure","candidate","listener","module","exports"],"mappings":"AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,sBAAjB,CAAd;;AAEA,MAAME,sBAAsB,GAAG,EAA/B;AACA,MAAMC,SAAS,GAAG,EAAlB;;AAEA,MAAMC,GAAG,GAAGC,KAAK,IAAI,CAACA,KAAtB;;AAEA,MAAMC,QAAQ,GAAGD,KAAK,IAAIA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsC,CAACE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAjE;;AAEA,MAAMI,eAAe,GAAGJ,KAAK,IAAI,2BAA2BK,IAA3B,CAAgCL,KAAhC,CAAjC;;AAEA,MAAMM,SAAS,GAAGN,KAAK,IAAIA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,IAAsCO,MAAM,CAACC,SAAP,CAAiBR,KAAjB,CAAjE;;AAEA,MAAMS,WAAW,GAAIC,EAAD,IAAQ;AAC1BZ,EAAAA,SAAS,CAACa,IAAV,CAAeD,EAAf;AACAd,EAAAA,KAAK,CAAE,uBAAsBE,SAAS,CAACc,MAAO,YAAzC,CAAL;AACD,CAHD;;AAKA,MAAMC,wBAAwB,GAAIH,EAAD,IAAQ;AACvCb,EAAAA,sBAAsB,CAACc,IAAvB,CAA4BD,EAA5B;AACAd,EAAAA,KAAK,CAAE,sCAAqCC,sBAAsB,CAACe,MAAO,YAArE,CAAL;AACD,CAHD;;AAKA,MAAME,gBAAgB,GAAG,CAACC,MAAD,EAASC,MAAT,EAAiBC,OAAjB,KAA6B;AACpD,QAAMC,KAAK,GAAGhB,KAAK,CAACC,OAAN,CAAca,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,CAA/C;AACAE,EAAAA,KAAK,CAACC,OAAN,CAAed,IAAD,IAAU;AACtB,QAAIA,IAAJ,EAAU;AACR,YAAM,IAAIe,KAAJ,CAAW,uCAAsC1B,IAAI,CAAC2B,OAAL,CAAaN,MAAb,EAAqB;AAAEO,QAAAA,KAAK,EAAE;AAAT,OAArB,CAAmC,GAA1E,GACX,MAAKL,OAAQ,EADZ,CAAN;AAED;AACF,GALD;AAMD,CARD;;AAUA,MAAMM,SAAS,GAAIC,SAAD,IAAe;AAC/B5B,EAAAA,KAAK,CAAC,qCAAD,EAAwC4B,SAAxC,CAAL;AACAV,EAAAA,gBAAgB,CAACU,SAAD,EAAYzB,GAAG,CAACE,QAAQ,CAACuB,SAAD,CAAT,CAAf,EAAsC,oBAAtC,CAAhB;AAEA5B,EAAAA,KAAK,CAAE,qCAAoCC,sBAAsB,CAACe,MAAO,GAApE,CAAL;AACAf,EAAAA,sBAAsB,CAACsB,OAAvB,CAA+BM,QAAQ,IAAIA,QAAQ,CAACD,SAAD,CAAnD;AACA5B,EAAAA,KAAK,CAAC,wCAAD,CAAL;AAEAA,EAAAA,KAAK,CAAE,oCAAmCE,SAAS,CAACc,MAAO,GAAtD,CAAL;AACAd,EAAAA,SAAS,CAACqB,OAAV,CAAkBM,QAAQ,IAAIA,QAAQ,CAACD,SAAD,CAAtC;AACA5B,EAAAA,KAAK,CAAC,yBAAD,CAAL;AACD,CAXD;;AAaA8B,MAAM,CAACC,OAAP,GAAiB;AACfJ,EAAAA,SADe;AAEfd,EAAAA,WAFe;AAGfI,EAAAA,wBAHe;AAIfC,EAAAA,gBAJe;AAKfb,EAAAA,QALe;AAMfK,EAAAA,SANe;AAOfF,EAAAA,eAPe;AAQfL,EAAAA;AARe,CAAjB","sourcesContent":["\n\nconst util = require('util');\nconst debug = require('debug')('log4js:configuration');\n\nconst preProcessingListeners = [];\nconst listeners = [];\n\nconst not = thing => !thing;\n\nconst anObject = thing => thing && typeof thing === 'object' && !Array.isArray(thing);\n\nconst validIdentifier = thing => /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\n\nconst anInteger = thing => thing && typeof thing === 'number' && Number.isInteger(thing);\n\nconst addListener = (fn) => {\n  listeners.push(fn);\n  debug(`Added listener, now ${listeners.length} listeners`);\n};\n\nconst addPreProcessingListener = (fn) => {\n  preProcessingListeners.push(fn);\n  debug(`Added pre-processing listener, now ${preProcessingListeners.length} listeners`);\n};\n\nconst throwExceptionIf = (config, checks, message) => {\n  const tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach((test) => {\n    if (test) {\n      throw new Error(`Problem with log4js configuration: (${util.inspect(config, { depth: 5 })})`\n        + ` - ${message}`);\n    }\n  });\n};\n\nconst configure = (candidate) => {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n\n  debug(`Calling pre-processing listeners (${preProcessingListeners.length})`);\n  preProcessingListeners.forEach(listener => listener(candidate));\n  debug('Configuration pre-processing finished.');\n\n  debug(`Calling configuration listeners (${listeners.length})`);\n  listeners.forEach(listener => listener(candidate));\n  debug('Configuration finished.');\n};\n\nmodule.exports = {\n  configure,\n  addListener,\n  addPreProcessingListener,\n  throwExceptionIf,\n  anObject,\n  anInteger,\n  validIdentifier,\n  not\n};\n"]},"metadata":{},"sourceType":"script"}